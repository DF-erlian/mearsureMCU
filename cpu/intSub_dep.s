	AREA Func, CODE, READONLY ;
	EXPORT intsub_dep ;

intsub_dep
	
	push {r0, r1, r2, r3}
    ; ??????
    mov r0, #1
    mov r1, #2

    ; ???????
    mov r2, #0x00         ; ??? r2
    movw r2, #0x9680      ; ??? 16 ?
    movt r2, #0x0098      ; ??? 16 ?

loop
    ; ?????? 16 ? sub ??
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
	sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    sub r1, r0, r1
    

    ; ???????
    subs r2, r2, #1
    bne loop
	
	pop {r3, r2, r1, r0}
    ; ????
    bx lr
